TRUE := λx.λy.x
FALSE := λx.λy.y
AND := λp.λq.p q p
OR := λp.λq.p p q
NOT := λp.p FALSE TRUE
IFTHENELSE := λp.λa.λb.p a b
SUCC := λn.λf.λx.f (n f x)
PRED := λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)
PLUS := λm.λn.λf.λx.m f (n f x)
SUB := λm.λn.n PRED m
MULT := λm.λn.λf.m (n f)
POW := λx.λy.y x
ISZERO := λn.n (λx.FALSE) TRUE
LEQ := λm.λn.ISZERO (SUB m n)
0 := λf.λx.x
1 := SUCC 0
2 := SUCC 1
3 := SUCC 2
4 := SUCC 3
5 := SUCC 4
6 := SUCC 5
7 := SUCC 6
8 := SUCC 7
9 := SUCC 8
10 := SUCC 9
// The Y Combinator only works for systems that uses call-by-name semantics
// In strict languages, without lazy semantics, the Y Combinator will not terminate.
Y := (λg.(λx.g (x x)) (λx.g (x x)))
// The Z Combinator works with systems that use call-by-value semantics.
// This system (the rust-lambda-calculus executor) is halfway between strict and lazy,
// so Y and Z combinators both work (see below).
Z := λf. (λx. f (λy. x x y)) (λx. f (λy. x x y))
FACT := λf. (λn. (IFTHENELSE (LEQ n 1) 1 (MULT n (f (SUB n 1)))))
#3
#SUB 5 3
#MULT 2 (SUB 5 3)
#(\x. IFTHENELSE (LEQ x 1) TRUE FALSE) 2
#(λn. (IFTHENELSE (LEQ n 1) 1 (MULT n (SUCC (SUB n 1))))) 2
#(λm. λn. LEQ m n) 2 1
#(\f. \x. f x) SUCC 5
#(\f . \x. IFTHENELSE (LEQ x 1) (x) (f x)) SUCC 5
#(λf . λn. IFTHENELSE (LEQ n 1) 0 (f n)) SUCC 5
#(λf . λn. IFTHENELSE (LEQ n 1) 1 (f n)) SUCC 5
#(λf. λn. (IFTHENELSE (LEQ n 1) 1 (MULT n (f (SUB n 1))))) (SUCC) 2
#Y
#FACT
#Y
#Y FACT
#(Y FACT) 1
//Y FACT
(Y FACT) 1
(Y FACT) 2
(Y FACT) 3
(Y FACT) 4
(Y FACT) 5
(Z FACT) 5
(Y FACT) 6
(Y FACT) 7
//(\f. \a . \b . \c . f a (f b c)) PLUS 1 2 3
//FACT
//FACT 3
//(Y FACT)
//FACT FACT
#(Y FACT) 1
#(Y FACT) 2
#(Y FACT) 3
#(Y FACT) 10
